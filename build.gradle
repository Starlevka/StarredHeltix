plugins{
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
  maven {
        name = 'LlamaLad7'
        url = 'https://maven.llamalad7.dev/releases'
    }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"starredheltix" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath.set(file("src/client/resources/starredheltix.accesswidener"))
}

configurations.configureEach {
    resolutionStrategy {
        force "net.java.dev.jna:jna:5.14.0"
        force "net.java.dev.jna:jna-platform:5.14.0"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Discord RPC (JitPack) with JNA exclusion to prevent conflicts
implementation("com.github.Vatuu:discord-rpc:1.6.2") {
        exclude group: "net.java.dev.jna", module: "jna"
        exclude group: "net.java.dev.jna", module: "jna-platform"
    }
    
    // Explicitly add JNA dependenciesimplementation "net.java.dev.jna:jna:5.14.0"
    implementation "net.java.dev.jna:jna-platform:5.14.0"
    
    // Force the dependencies to be included
    include "net.java.dev.jna:jna:5.14.0"
    include "net.java.dev.jna:jna-platform:5.14.0"
    
// Gsonfor JSON parsing in the updater
    implementation "com.google.code.gson:gson:2.10.1"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
	
	// Handle duplicate files
	duplicatesStrategy =DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove thisline, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
	
	manifest{
        attributes(
                'Implementation-Title': 'StarredHeltix',
                'Implementation-Version': project.version,
                'Main-Class': 'set.starlev.starredheltix.client.StarredHeltixClient'
        )
    }
	
	// Handle duplicate files
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.htmlfor information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing yourartifact, not for
		// retrieving dependencies.
	}
}